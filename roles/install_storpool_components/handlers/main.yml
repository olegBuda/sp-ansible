- name: Rebuilding GRUB configuration on Debian-based OS
  become: true
  ansible.builtin.command: /usr/sbin/update-grub2
  listen: Update GRUB configuration
  when:
    - ansible_os_family == 'Debian'

- name: Checking if the host boots via EFI
  become: true
  stat:
    path: /sys/firmware/efi
  register: sysfs_firmware_efi
  listen: Update GRUB configuration
  when:
    - ansible_os_family == 'RedHat'

- name: Rebuilding GRUB configuration on RHEL-based OS
  become: true
  shell: |
    /usr/sbin/grub2-mkconfig \
    -o $(readlink -f /etc/grub2{{ '-efi' if sysfs_firmware_efi.stat.exists else '' }}.cfg)
  changed_when: false
  listen: Update GRUB configuration
  when:
    - ansible_os_family == 'RedHat'

- name: Rebooting host
  become: true
  ansible.builtin.reboot:
    reboot_timeout: 900
  listen: Reboot host
  throttle: "{{ sp_reboot_sequentially | ternary(1, 63) }}"
  when:
    - sp_reboot_after_install

- name: Gather facts anew after reboot
  ansible.builtin.setup:
    gather_subset:
      - 'all'
      - '!facter'
  listen: Reboot host
  when:
    - sp_reboot_after_install

- name: Verify we are using the specified kernel
  ansible.builtin.assert:
    that:
      - ansible_kernel | regex_search("^" + sp_kernel_version)
    success_msg: "Running expected kernel {{ sp_kernel_version }}"
    fail_msg: "Running unexpected kernel {{ ansible_kernel }}"
  listen: Reboot host
  when:
    - sp_reboot_after_install
    - sp_kernel_version is defined

- name: Verify kernel parameters are applied
  command:
    argv:
      - "/usr/lib/storpool/kernel_cmdline_check"
      - "--exit-code"
      - "2"
  listen: Reboot host
  when:
    - sp_reboot_after_install
    - sp_kernel_version is defined
